// Generated by CoffeeScript 1.7.1
(function() {
  var cliconfig, config, e, fs, packageinf, program, _;

  program = require('commander');

  packageinf = require('../package.json');

  fs = require('fs');

  _ = require('lodash');

  config = {};

  cliconfig = {};

  if (fs.existsSync('./imgtagger.conf.js')) {
    console.log('Config file exists, loading...');
    try {
      config = require('./imgtagger.conf.js');
    } catch (_error) {
      e = _error;
      console.error('Error while parsing imgtagger.conf.js: ' + e);
      process.exit(1);
    }
  }

  program.version(packageinf.version).option('-d, --dry', 'No renaming, just output', function() {
    return cliconfig.dry = true;
  }).option('-m, --regex <regex>', 'Regular expression for matching image id.', function(ex) {
    var regex;
    try {
      regex = new RegExp(ex);
      return cliconfig.match = function(fname) {
        var result;
        result = fname.match(regex);
        if (_.isNull(result)) {
          return false;
        }
        return _.last(result);
      };
    } catch (_error) {
      e = _error;
      console.error(e);
      return process.exit(1);
    }
  }).option('-t, --template <string>', 'Underscore template for formatting output filename (extension will be added automatically)', function(template) {
    return cliconfig.template = _.template(template, null);
  }).option('-i, --include <mime>', 'MIME type to include.', function(type) {
    if (cliconfig.mime == null) {
      cliconfig.mime = [];
    }
    return cliconfig.mime.push(type);
  }).option('-c, --config <filename>', 'Specify config file.', function(conf) {
    try {
      return config = require(conf);
    } catch (_error) {
      e = _error;
      console.error('Error while loading config file: ' + e);
      return process.exit(1);
    }
  });

  program.command('pixiv').description('Tag images from pixiv.').action(function(env) {
    config = _.extend(config, cliconfig);
    return require('./pixiv')(env, config);
  });

  program.parse(process.argv);

}).call(this);

//# sourceMappingURL=index.map
