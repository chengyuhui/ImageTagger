// Generated by CoffeeScript 1.7.1
(function() {
  var async, cheerio, dive, fs, mime, path, removeLongest, request, wait, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('lodash');

  dive = require('dive');

  path = require('path');

  async = require('async');

  wait = require('wait.for');

  mime = require('mime');

  request = require('superagent');

  cheerio = require('cheerio');

  fs = require('fs');

  removeLongest = function(arr) {
    var i, longestIndex, longestLen, v, _i, _len;
    longestLen = 0;
    longestIndex = 0;
    for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
      v = arr[i];
      if (v == null) {
        continue;
      }
      if (v.length > longestLen) {
        longestIndex = i;
        longestLen = v.length;
      }
    }
    console.log('Removed tag %s because it is too long.', arr[longestIndex]);
    delete arr[longestIndex];
    return arr;
  };

  module.exports = function(env, config) {
    var defaults, queue;
    defaults = {
      match: function(fname) {
        var result;
        result = fname.match(/^.*\((\d+)\)\s*$/);
        if (_.isNull(result)) {
          return false;
        }
        return _.last(result);
      },
      dry: false,
      template: _.template('<%= user %> - <%= title %> (<%= work_id %>@<%= user_id %>)[ #<%= tags.join(" ") %> ]'),
      recursive: false,
      mime: ['image/jpeg', 'image/png'],
      dir: env || process.cwd()
    };
    config = _.extend(defaults, config);
    queue = async.queue(function(id, done) {
      var err;
      err = function(e) {
        return _.defer(done, e);
      };
      return wait.launchFiber(function() {
        var $, agent, e, info, res, tags, user;
        agent = request.get(['http://zh.pixiv.com/works/', id].join('')).set('User-Agent', 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36');
        res = null;
        try {
          res = wait.forMethod(agent, 'end');
        } catch (_error) {
          e = _error;
          return err(e);
        }
        if (res.statusCode !== 200) {
          return err(res.statusCode);
        }
        $ = cheerio.load(res.text);
        info = {
          title: $('h1.title').text(),
          work_id: id
        };
        user = $('.author-summary').children('.u-name');
        info.user_id = _.last(user.attr('href').split('/'));
        info.user = user.children().text();
        info.tags = tags = [];
        $('.added-tags').children().each(function(index, elem) {
          return tags.push($(this).children('a').text().trim());
        });
        wait["for"](_.partialRight(setTimeout, 100));
        return _.defer(done, null, info);
      });
    }, 1);
    return dive(config.dir, {
      recursive: config.recursive
    }, function(err, name) {
      var id, _ref;
      if (err) {
        console.log(err);
        return;
      }
      if (_ref = !mime.lookup(name), __indexOf.call(config.mime, _ref) >= 0) {
        return;
      }
      id = config.match(path.basename(name, path.extname(name)));
      if (!id) {
        return;
      }
      return queue.push(id, function(err, info) {
        var newName;
        if (err) {
          return console.error('ERR:' + err);
        }
        while (config.template(info).length > 100) {
          info.tags = removeLongest(info.tags);
        }
        newName = config.template(info);
        console.log(path.basename(name, path.extname(name)) + ' -> ' + newName);
        if (config.dry) {
          return;
        }
        return fs.renameSync(name, path.dirname(name) + '/' + newName + path.extname(name));
      });
    });
  };

}).call(this);

//# sourceMappingURL=pixiv.map
